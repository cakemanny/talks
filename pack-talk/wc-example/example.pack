; create and initialise the "example" namespace
(ns example)
; import the python builtins module, saving it in the "py" namespace
; and referring to it in this oen
(import builtins)

; define a function taking a single parameter
; this opens a file, reads the contents, closes the file and then returns
; those contents
(defn read-file
  [file-name]
  (let [f ((. builtins open) file-name)
        contents ((. f read))]
    (do
      ((. f close))
      contents)))

;; we define a function that calls python's str split method
;; and then converts the list to a vector
(defn split- [sep the-str] (apply vector ((. the-str split) sep)))
;; we use that split- to make a utility function that can be curried
;; the argument after & is a rest param like "*args" in python
(defn split [sep & the-strs]
  (if the-strs
    (split- (first the-strs))
    (fn [a-str] (split- needle a-str))))

(def to-lines (split "\n"))
(defn to-words
  [lines]
  (map (split " ") lines))


(defmacro comment [& forms] nil)
(comment
  ; an exmaple
  (example/read-file "/usr/share/calendar/calendar.lotr")
  (def s (example/read-file "/usr/share/calendar/calendar.lotr"))
  (to-lines s)
  ;; TODO: we need to implement map for vector
  (to-words (to-lines s))
)

;; vim:ft=clojure:
